from re import sub


def convert_bin(bin_arr):  # Binary array to string
    str_text = ''.join(str(i) for i in bin_arr)
    text = ''.join(
        chr(int(str_text[i:i + 8], 2)) for i in range(0, len(str_text), 8))
    return text


def lfsr(key, poly, bin_arr_len):
    # This lfsr is generated by the key, the polynomial, and the
    # number of list elements, but not the text itself.
    shift_key = key  # Get copy
    xor, lfsr_out = 0, []  # Initialize

    for i in range(bin_arr_len):
        # shift_key = key # Uncomment to reset the lfsr for each byte:
        for j in range(8):  # 8 for 8 bits
            for k in poly:
                xor += int(shift_key[k - 1])
            if xor % 2 == 0:
                xor = 0
            else:
                xor = 1
            lfsr_out.append(xor)
            shift_key = str(xor) + shift_key[:-1]  # Update
            xor = 0  # Reset

    return list(zip(*[iter(lfsr_out)] * 8))


def full_adder(bin_arr, lfsr_17, lfsr_25):
    # The full-adder truth table below is utilized to determine the final bit
    # values to be output.
    cin, cout = 0, 0 # 'c' is carry
    s, crypt_bin = [], []  # 's' is the normal output

    # Using the same looping rules from lfsr.py:
    for i in range(len(bin_arr)):
        for j in range(len(bin_arr[i])):
            if lfsr_17[i][j] + lfsr_25[i][j] + cin == 0:
                s.append(0)
                cout = 0
            elif lfsr_17[i][j] + lfsr_25[i][j] + cin == 1:
                s.append(1)
                cout = 0
            elif lfsr_17[i][j] + lfsr_25[i][j] + cin == 2:
                s.append(0)
                cout = 1
            elif lfsr_17[i][j] + lfsr_25[i][j] + cin == 3:
                s.append(1)
                cout = 1
            cin = cout
            # Xor to obtain the bit to append.  Repeat until the loops finish,
            # and return the final result.
            crypt_bin.append((s[i] + int(bin_arr[i][j])) % 2)

    return crypt_bin


# Initialize the plaintext
plaintext = ("OnemansmagicisanothermansengineeringSupernaturalisanullword"
             "OnemanstheologyisanothermansbellylaughProgressisntmadebyearly"
             "risersItsmadebylazymentryingtofindeasierwaystodosomething")
plaintext = sub(r'[^\w\s]', '', (''.join(plaintext.split())))  # Letters only
plaintext_bin_arr = [bin(ord(i)).replace('b', '')
                     for i in plaintext]  # Binary list

# Initialize keys - key must be exactly 40 bits
keyword = "Shane"
key = bin(int.from_bytes(keyword.encode(), "big")).replace('b', '')
key_17 = '1' + key[:16]
key_25 = '1' + key[16:]

# Initialize plaintext LFSRs
lfsr_17 = lfsr(key_17, [17, 3], len(plaintext_bin_arr))
lfsr_25 = lfsr(key_25, [25, 8, 6, 2], len(plaintext_bin_arr))

# Encrypt
crypt_bin = full_adder(plaintext_bin_arr, lfsr_17, lfsr_25)

# Normalize
crypt_bin_str = "".join([str(i) for i in crypt_bin])
crypt_bin_arr = [
    crypt_bin_str[i:i + 8] for i in range(0, len(crypt_bin_str), 8)
]

# Initialize ciphertext LFSRs
lfsr_17 = lfsr(key_17, [17, 3], len(crypt_bin_arr))
lfsr_25 = lfsr(key_25, [25, 8, 6, 2], len(crypt_bin_arr))

# Decrypt
decrypt_bin = full_adder(crypt_bin_arr, lfsr_17, lfsr_25)

# Normalize
decrypt_bin_str = "".join([str(i) for i in decrypt_bin])
decrypt_bin_arr = [
    decrypt_bin_str[i:i + 8] for i in range(0, len(decrypt_bin_str), 8)
]

# Print the results
print("The keyword: ", keyword)
print("The plaintext: ", convert_bin(plaintext_bin_arr)[0:75])
print("The ciphertext: ", convert_bin(crypt_bin_arr))
print("The dectext: ", convert_bin(decrypt_bin_arr)[0:75])
