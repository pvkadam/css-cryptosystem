def lfsr(key, taps, bin_arr):
    # This lfsr is generated by the size of the key, the polynomial, and the
    # number of list elements.
    shift_key, xor = key, 0
    lfsr_out = []

    for i in range(len(bin_arr)):
        # Uncomment the line below to allow the lfsr to be reset for each byte.
        # shift_key = key
        for j in range(len(bin_arr[i])):
            # j should always be in range of 8, which is represented here as
            # the length of the binary list per byte.
            for t in taps:
                xor += int(shift_key[t - 1])
            if xor % 2 == 0:
                xor = 0
            else:
                xor = 1
            lfsr_out.append(xor)
            shift_key, xor = str(xor) + shift_key[:-1], 0
            if shift_key == key:
                break

    return lfsr_out
